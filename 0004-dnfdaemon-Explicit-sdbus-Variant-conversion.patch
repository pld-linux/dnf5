From 4714a43af45942a033caff85b8b1d5d9983c7035 Mon Sep 17 00:00:00 2001
From: Marek Blaha <mblaha@redhat.com>
Date: Fri, 17 May 2024 13:03:42 +0200
Subject: [PATCH 04/24] dnfdaemon: Explicit sdbus::Variant conversion

In version 2, conversion of sdbus::Variant to the underlying type is
explicit.
---
 .../needs_restarting.cpp                      |  6 +--
 dnf5/commands/offline/offline.cpp             |  3 +-
 .../wrappers/dbus_advisory_wrapper.hpp        | 44 ++++++++--------
 .../wrappers/dbus_environment_wrapper.cpp     |  2 +-
 .../wrappers/dbus_environment_wrapper.hpp     |  9 ++--
 .../wrappers/dbus_goal_wrapper.cpp            |  2 +-
 .../wrappers/dbus_group_wrapper.cpp           |  4 +-
 .../wrappers/dbus_group_wrapper.hpp           | 16 +++---
 .../wrappers/dbus_package_wrapper.hpp         | 42 +++++++--------
 .../wrappers/dbus_repo_wrapper.cpp            |  2 +-
 .../wrappers/dbus_repo_wrapper.hpp            | 52 +++++++++----------
 11 files changed, 92 insertions(+), 90 deletions(-)

diff --git a/dnf5-plugins/needs_restarting_plugin/needs_restarting.cpp b/dnf5-plugins/needs_restarting_plugin/needs_restarting.cpp
index 6d9de330..846a95f5 100644
--- a/dnf5-plugins/needs_restarting_plugin/needs_restarting.cpp
+++ b/dnf5-plugins/needs_restarting_plugin/needs_restarting.cpp
@@ -119,8 +119,8 @@ time_t NeedsRestartingCommand::get_boot_time(Context & ctx) {
         connection = sdbus::createSystemBusConnection();
         auto proxy = sdbus::createProxy(SYSTEMD_DESTINATION_NAME, SYSTEMD_OBJECT_PATH);
 
-        const uint64_t systemd_boot_time_us =
-            proxy->getProperty("UnitsLoadStartTimestamp").onInterface(SYSTEMD_MANAGER_INTERFACE);
+        const auto systemd_boot_time_us =
+            uint64_t{proxy->getProperty("UnitsLoadStartTimestamp").onInterface(SYSTEMD_MANAGER_INTERFACE)};
 
         const time_t systemd_boot_time = static_cast<long>(systemd_boot_time_us) / (1000L * 1000L);
 
@@ -275,7 +275,7 @@ void NeedsRestartingCommand::services_need_restarting(Context & ctx) {
         // FragmentPath is the path to the unit file that defines the service
         const auto fragment_path = unit_proxy->getProperty("FragmentPath").onInterface(SYSTEMD_UNIT_INTERFACE);
         const auto start_timestamp_us =
-            unit_proxy->getProperty("ActiveEnterTimestamp").onInterface(SYSTEMD_UNIT_INTERFACE);
+            uint64_t{unit_proxy->getProperty("ActiveEnterTimestamp").onInterface(SYSTEMD_UNIT_INTERFACE)};
 
         unit_file_to_service.insert(std::make_pair(fragment_path, Service{unit_name, start_timestamp_us}));
     }
diff --git a/dnf5/commands/offline/offline.cpp b/dnf5/commands/offline/offline.cpp
index fa1240e2..eb937c0f 100644
--- a/dnf5/commands/offline/offline.cpp
+++ b/dnf5/commands/offline/offline.cpp
@@ -322,7 +322,8 @@ void OfflineRebootCommand::run() {
             .storeResultsTo(unit_object_path);
 
         auto unit_proxy = sdbus::createProxy(SYSTEMD_DESTINATION_NAME, unit_object_path);
-        const std::vector<std::string> & wants = unit_proxy->getProperty("Wants").onInterface(SYSTEMD_UNIT_INTERFACE);
+        const auto & wants =
+            std::vector<std::string>{unit_proxy->getProperty("Wants").onInterface(SYSTEMD_UNIT_INTERFACE)};
         if (std::find(wants.begin(), wants.end(), SYSTEMD_SERVICE_NAME) == wants.end()) {
             throw libdnf5::cli::CommandExitError(
                 1, M_("{} is not wanted by system-update.target."), SYSTEMD_SERVICE_NAME);
diff --git a/dnf5daemon-client/wrappers/dbus_advisory_wrapper.hpp b/dnf5daemon-client/wrappers/dbus_advisory_wrapper.hpp
index 150d6cc9..d8a62fc6 100644
--- a/dnf5daemon-client/wrappers/dbus_advisory_wrapper.hpp
+++ b/dnf5daemon-client/wrappers/dbus_advisory_wrapper.hpp
@@ -55,13 +55,13 @@ private:
 class DbusAdvisoryPackageWrapper {
 public:
     DbusAdvisoryPackageWrapper(const dnfdaemon::KeyValueMap & rawdata, DbusAdvisoryWrapper * advisory);
-    std::string get_name() const { return rawdata.at("n"); }
-    std::string get_epoch() const { return rawdata.at("e"); }
-    std::string get_version() const { return rawdata.at("v"); }
-    std::string get_release() const { return rawdata.at("r"); }
-    std::string get_arch() const { return rawdata.at("a"); }
+    std::string get_name() const { return std::string{rawdata.at("n")}; }
+    std::string get_epoch() const { return std::string{rawdata.at("e")}; }
+    std::string get_version() const { return std::string{rawdata.at("v")}; }
+    std::string get_release() const { return std::string{rawdata.at("r")}; }
+    std::string get_arch() const { return std::string{rawdata.at("a")}; }
     std::string get_nevra() const { return libdnf5::rpm::to_nevra_string(*this); }
-    std::string get_applicability() const { return rawdata.at("applicability"); }
+    std::string get_applicability() const { return std::string{rawdata.at("applicability")}; }
 
     DbusAdvisoryWrapper get_advisory() const;
 
@@ -74,11 +74,11 @@ private:
 class DbusAdvisoryModuleWrapper {
 public:
     DbusAdvisoryModuleWrapper(const dnfdaemon::KeyValueMap & rawdata, DbusAdvisoryWrapper * advisory);
-    std::string get_name() const { return rawdata.at("n"); }
-    std::string get_stream() const { return rawdata.at("s"); }
-    std::string get_version() const { return rawdata.at("v"); }
-    std::string get_context() const { return rawdata.at("c"); }
-    std::string get_arch() const { return rawdata.at("a"); }
+    std::string get_name() const { return std::string{rawdata.at("n")}; }
+    std::string get_stream() const { return std::string{rawdata.at("s")}; }
+    std::string get_version() const { return std::string{rawdata.at("v")}; }
+    std::string get_context() const { return std::string{rawdata.at("c")}; }
+    std::string get_arch() const { return std::string{rawdata.at("a")}; }
     std::string get_nsvca() const {
         return get_name() + ":" + get_stream() + ":" + get_version() + ":" + get_context() + ":" + get_arch();
     }
@@ -107,17 +107,17 @@ class DbusAdvisoryWrapper {
 public:
     explicit DbusAdvisoryWrapper(const dnfdaemon::KeyValueMap & rawdata);
 
-    std::string get_advisoryid() const { return rawdata.at("advisoryid"); }
-    std::string get_name() const { return rawdata.at("name"); }
-    std::string get_severity() const { return rawdata.at("severity"); }
-    std::string get_type() const { return rawdata.at("type"); }
-    uint64_t get_buildtime() const { return rawdata.at("buildtime"); }
-    std::string get_vendor() const { return rawdata.at("vendor"); }
-    std::string get_description() const { return rawdata.at("description"); }
-    std::string get_title() const { return rawdata.at("title"); }
-    std::string get_status() const { return rawdata.at("status"); }
-    std::string get_rights() const { return rawdata.at("rights"); }
-    std::string get_message() const { return rawdata.at("message"); }
+    std::string get_advisoryid() const { return std::string{rawdata.at("advisoryid")}; }
+    std::string get_name() const { return std::string{rawdata.at("name")}; }
+    std::string get_severity() const { return std::string{rawdata.at("severity")}; }
+    std::string get_type() const { return std::string{rawdata.at("type")}; }
+    uint64_t get_buildtime() const { return uint64_t{rawdata.at("buildtime")}; }
+    std::string get_vendor() const { return std::string{rawdata.at("vendor")}; }
+    std::string get_description() const { return std::string{rawdata.at("description")}; }
+    std::string get_title() const { return std::string{rawdata.at("title")}; }
+    std::string get_status() const { return std::string{rawdata.at("status")}; }
+    std::string get_rights() const { return std::string{rawdata.at("rights")}; }
+    std::string get_message() const { return std::string{rawdata.at("message")}; }
     std::vector<DbusAdvisoryReferenceWrapper> get_references() const { return references; }
     std::vector<DbusAdvisoryCollectionWrapper> get_collections() const { return collections; }
 
diff --git a/dnf5daemon-client/wrappers/dbus_environment_wrapper.cpp b/dnf5daemon-client/wrappers/dbus_environment_wrapper.cpp
index e46935af..d885b064 100644
--- a/dnf5daemon-client/wrappers/dbus_environment_wrapper.cpp
+++ b/dnf5daemon-client/wrappers/dbus_environment_wrapper.cpp
@@ -24,7 +24,7 @@ namespace dnfdaemon::client {
 DbusEnvironmentWrapper::DbusEnvironmentWrapper(const dnfdaemon::KeyValueMap & rawdata) : rawdata(rawdata) {};
 
 std::set<std::string> DbusEnvironmentWrapper::get_repos() const {
-    std::vector<std::string> repos_vector = rawdata.at("repos");
+    auto repos_vector = std::vector<std::string>(rawdata.at("repos"));
     std::set<std::string> repos_set(repos_vector.begin(), repos_vector.end());
     return repos_set;
 };
diff --git a/dnf5daemon-client/wrappers/dbus_environment_wrapper.hpp b/dnf5daemon-client/wrappers/dbus_environment_wrapper.hpp
index 16e4a52d..aa8d9e17 100644
--- a/dnf5daemon-client/wrappers/dbus_environment_wrapper.hpp
+++ b/dnf5daemon-client/wrappers/dbus_environment_wrapper.hpp
@@ -24,6 +24,7 @@ along with libdnf.  If not, see <https://www.gnu.org/licenses/>.
 #include <dnf5daemon-server/utils.hpp>
 
 #include <set>
+#include <string>
 #include <vector>
 
 namespace dnfdaemon::client {
@@ -32,10 +33,10 @@ class DbusEnvironmentWrapper {
 public:
     explicit DbusEnvironmentWrapper(const dnfdaemon::KeyValueMap & rawdata);
 
-    std::string get_environmentid() const { return rawdata.at("environmentid"); }
-    std::string get_name() const { return rawdata.at("name"); }
-    std::string get_description() const { return rawdata.at("description"); }
-    std::string get_order() const { return rawdata.at("order"); }
+    std::string get_environmentid() const { return std::string{rawdata.at("environmentid")}; }
+    std::string get_name() const { return std::string{rawdata.at("name")}; }
+    std::string get_description() const { return std::string{rawdata.at("description")}; }
+    std::string get_order() const { return std::string{rawdata.at("order")}; }
     // TODO(mblaha) proper installed value
     bool get_installed() const { return false; }
     std::set<std::string> get_repos() const;
diff --git a/dnf5daemon-client/wrappers/dbus_goal_wrapper.cpp b/dnf5daemon-client/wrappers/dbus_goal_wrapper.cpp
index 044c13ac..f50bd652 100644
--- a/dnf5daemon-client/wrappers/dbus_goal_wrapper.cpp
+++ b/dnf5daemon-client/wrappers/dbus_goal_wrapper.cpp
@@ -59,7 +59,7 @@ DbusGoalWrapper::DbusGoalWrapper(std::vector<dnfdaemon::DbusTransactionItem> tra
         auto ti_replaces = ti_attrs.find("replaces");
         if (ti_replaces != ti_attrs.end()) {
             std::vector<DbusPackageWrapper> replaces;
-            std::vector<int> replaces_id = ti_replaces->second;
+            std::vector<int> replaces_id = std::vector<int>(ti_replaces->second);
             for (const auto & pkg_id : replaces_id) {
                 auto replaced_pkg_idx = transaction_packages_by_id.find(pkg_id);
                 if (replaced_pkg_idx != transaction_packages_by_id.end()) {
diff --git a/dnf5daemon-client/wrappers/dbus_group_wrapper.cpp b/dnf5daemon-client/wrappers/dbus_group_wrapper.cpp
index 13faed85..2a0898b2 100644
--- a/dnf5daemon-client/wrappers/dbus_group_wrapper.cpp
+++ b/dnf5daemon-client/wrappers/dbus_group_wrapper.cpp
@@ -24,7 +24,7 @@ namespace dnfdaemon::client {
 DbusGroupWrapper::DbusGroupWrapper(const dnfdaemon::KeyValueMap & rawdata) : rawdata(rawdata) {
     auto packages_iter = rawdata.find("packages");
     if (packages_iter != rawdata.end()) {
-        dnfdaemon::KeyValueMapList raw_packages = packages_iter->second;
+        auto raw_packages = dnfdaemon::KeyValueMapList(packages_iter->second);
         for (auto & raw_package : raw_packages) {
             packages.push_back(DbusGroupPackageWrapper(raw_package));
         }
@@ -32,7 +32,7 @@ DbusGroupWrapper::DbusGroupWrapper(const dnfdaemon::KeyValueMap & rawdata) : raw
 };
 
 std::set<std::string> DbusGroupWrapper::get_repos() const {
-    std::vector<std::string> repos_vector = rawdata.at("repos");
+    std::vector<std::string> repos_vector = std::vector<std::string>(rawdata.at("repos"));
     std::set<std::string> repos_set(repos_vector.begin(), repos_vector.end());
     return repos_set;
 };
diff --git a/dnf5daemon-client/wrappers/dbus_group_wrapper.hpp b/dnf5daemon-client/wrappers/dbus_group_wrapper.hpp
index 87bdda6f..c6245fdd 100644
--- a/dnf5daemon-client/wrappers/dbus_group_wrapper.hpp
+++ b/dnf5daemon-client/wrappers/dbus_group_wrapper.hpp
@@ -34,7 +34,7 @@ public:
     class DbusGroupPackageWrapper {
     public:
         explicit DbusGroupPackageWrapper(dnfdaemon::KeyValueMap & rawdata) : rawdata(rawdata) {}
-        std::string get_name() const { return rawdata.at("name"); }
+        std::string get_name() const { return std::string{rawdata.at("name")}; }
         libdnf5::comps::PackageType get_type() const {
             return static_cast<libdnf5::comps::PackageType>(key_value_map_get<int>(rawdata, "type"));
         }
@@ -45,13 +45,13 @@ public:
 
     explicit DbusGroupWrapper(const dnfdaemon::KeyValueMap & rawdata);
 
-    std::string get_groupid() const { return rawdata.at("groupid"); }
-    std::string get_name() const { return rawdata.at("name"); }
-    std::string get_description() const { return rawdata.at("description"); }
-    std::string get_order() const { return rawdata.at("order"); }
-    std::string get_langonly() const { return rawdata.at("langonly"); }
-    bool get_installed() const { return rawdata.at("installed"); }
-    bool get_uservisible() const { return rawdata.at("uservisible"); }
+    std::string get_groupid() const { return std::string{rawdata.at("groupid")}; }
+    std::string get_name() const { return std::string{rawdata.at("name")}; }
+    std::string get_description() const { return std::string{rawdata.at("description")}; }
+    std::string get_order() const { return std::string{rawdata.at("order")}; }
+    std::string get_langonly() const { return std::string{rawdata.at("langonly")}; }
+    bool get_installed() const { return bool{rawdata.at("installed")}; }
+    bool get_uservisible() const { return bool{rawdata.at("uservisible")}; }
     std::set<std::string> get_repos() const;
     std::vector<DbusGroupPackageWrapper> get_packages() const { return packages; }
 
diff --git a/dnf5daemon-client/wrappers/dbus_package_wrapper.hpp b/dnf5daemon-client/wrappers/dbus_package_wrapper.hpp
index a59d3836..398fd8de 100644
--- a/dnf5daemon-client/wrappers/dbus_package_wrapper.hpp
+++ b/dnf5daemon-client/wrappers/dbus_package_wrapper.hpp
@@ -32,30 +32,30 @@ class DbusPackageWrapper {
 public:
     explicit DbusPackageWrapper(const dnfdaemon::KeyValueMap & rawdata) : rawdata(rawdata) {};
 
-    int get_id() { return rawdata.at("id"); }
-    std::string get_name() const { return rawdata.at("name"); }
+    int get_id() { return int{rawdata.at("id")}; }
+    std::string get_name() const { return std::string{rawdata.at("name")}; }
     std::string get_na() const { return get_name() + "." + get_arch(); }
-    std::string get_epoch() const { return rawdata.at("epoch"); }
-    std::string get_version() const { return rawdata.at("version"); }
-    std::string get_release() const { return rawdata.at("release"); }
-    std::string get_arch() const { return rawdata.at("arch"); }
-    std::string get_repo_id() const { return rawdata.at("repo_id"); }
-    std::string get_from_repo_id() const { return rawdata.at("from_repo_id"); }
-    std::string get_nevra() const { return rawdata.at("nevra"); }
-    std::string get_full_nevra() const { return rawdata.at("full_nevra"); }
-    std::string get_evr() const { return rawdata.at("evr"); }
-    bool is_installed() const { return rawdata.at("is_installed"); }
-    uint64_t get_install_size() const { return rawdata.at("install_size"); }
-    uint64_t get_download_size() const { return rawdata.at("download_size"); }
-    std::string get_sourcerpm() const { return rawdata.at("sourcerpm"); }
-    std::string get_summary() const { return rawdata.at("summary"); }
-    std::string get_url() const { return rawdata.at("url"); }
-    std::string get_license() const { return rawdata.at("license"); }
-    std::string get_description() const { return rawdata.at("description"); }
+    std::string get_epoch() const { return std::string{rawdata.at("epoch")}; }
+    std::string get_version() const { return std::string{rawdata.at("version")}; }
+    std::string get_release() const { return std::string{rawdata.at("release")}; }
+    std::string get_arch() const { return std::string{rawdata.at("arch")}; }
+    std::string get_repo_id() const { return std::string{rawdata.at("repo_id")}; }
+    std::string get_from_repo_id() const { return std::string{rawdata.at("from_repo_id")}; }
+    std::string get_nevra() const { return std::string{rawdata.at("nevra")}; }
+    std::string get_full_nevra() const { return std::string{rawdata.at("full_nevra")}; }
+    std::string get_evr() const { return std::string{rawdata.at("evr")}; }
+    bool is_installed() const { return bool{rawdata.at("is_installed")}; }
+    uint64_t get_install_size() const { return uint64_t{rawdata.at("install_size")}; }
+    uint64_t get_download_size() const { return uint64_t{rawdata.at("download_size")}; }
+    std::string get_sourcerpm() const { return std::string{rawdata.at("sourcerpm")}; }
+    std::string get_summary() const { return std::string{rawdata.at("summary")}; }
+    std::string get_url() const { return std::string{rawdata.at("url")}; }
+    std::string get_license() const { return std::string{rawdata.at("license")}; }
+    std::string get_description() const { return std::string{rawdata.at("description")}; }
     libdnf5::transaction::TransactionItemReason get_reason() const {
-        return libdnf5::transaction::transaction_item_reason_from_string(rawdata.at("reason"));
+        return libdnf5::transaction::transaction_item_reason_from_string(std::string{rawdata.at("reason")});
     }
-    std::string get_vendor() const { return rawdata.at("vendor"); }
+    std::string get_vendor() const { return std::string{rawdata.at("vendor")}; }
 
 private:
     dnfdaemon::KeyValueMap rawdata;
diff --git a/dnf5daemon-client/wrappers/dbus_repo_wrapper.cpp b/dnf5daemon-client/wrappers/dbus_repo_wrapper.cpp
index a5c5dd19..00530340 100644
--- a/dnf5daemon-client/wrappers/dbus_repo_wrapper.cpp
+++ b/dnf5daemon-client/wrappers/dbus_repo_wrapper.cpp
@@ -26,7 +26,7 @@ std::vector<std::pair<std::string, std::string>> DbusRepoWrapper::get_distro_tag
     // serialized to vector<string>.
     // convert [tag1, val1, tag2, val2,...] back to [(tag1, val1), (tag2, val2),...]
     std::vector<std::pair<std::string, std::string>> dt{};
-    std::vector<std::string> tags_raw = rawdata.at("distro_tags");
+    auto tags_raw = std::vector<std::string>(rawdata.at("distro_tags"));
     if (!tags_raw.empty()) {
         for (size_t i = 0; i < (tags_raw.size() - 1); i += 2) {
             dt.emplace_back(tags_raw[i], tags_raw[i + 1]);
diff --git a/dnf5daemon-client/wrappers/dbus_repo_wrapper.hpp b/dnf5daemon-client/wrappers/dbus_repo_wrapper.hpp
index 254928ad..a4788ac8 100644
--- a/dnf5daemon-client/wrappers/dbus_repo_wrapper.hpp
+++ b/dnf5daemon-client/wrappers/dbus_repo_wrapper.hpp
@@ -31,33 +31,33 @@ class DbusRepoWrapper : public libdnf5::cli::output::IRepoInfo {
 public:
     explicit DbusRepoWrapper(dnfdaemon::KeyValueMap & rawdata) : rawdata(rawdata) {};
 
-    std::string get_id() const { return rawdata.at("id"); }
-    std::string get_name() const { return rawdata.at("name"); }
-    std::string get_type() const { return rawdata.at("type"); }
-    bool is_enabled() const { return rawdata.at("enabled"); }
-    int get_priority() const { return rawdata.at("priority"); }
-    int get_cost() const { return rawdata.at("cost"); }
-    std::vector<std::string> get_baseurl() const { return rawdata.at("baseurl"); }
-    std::string get_metalink() const { return rawdata.at("metalink"); }
-    std::string get_mirrorlist() const { return rawdata.at("mirrorlist"); }
-    int get_metadata_expire() const { return rawdata.at("metadata_expire"); }
-    std::vector<std::string> get_excludepkgs() const { return rawdata.at("excludepkgs"); }
-    std::vector<std::string> get_includepkgs() const { return rawdata.at("includepkgs"); }
-    bool get_skip_if_unavailable() const { return rawdata.at("skip_if_unavailable"); }
-    std::vector<std::string> get_gpgkey() const { return rawdata.at("gpgkey"); }
-    bool get_gpgcheck() const { return rawdata.at("pkg_gpgcheck"); }
-    bool get_pkg_gpgcheck() const { return rawdata.at("pkg_gpgcheck"); }
-    bool get_repo_gpgcheck() const { return rawdata.at("repo_gpgcheck"); }
-    std::string get_repo_file_path() const { return rawdata.at("repofile"); }
-    std::string get_revision() const { return rawdata.at("revision"); }
-    std::vector<std::string> get_content_tags() const { return rawdata.at("content_tags"); }
+    std::string get_id() const { return std::string{rawdata.at("id")}; }
+    std::string get_name() const { return std::string{rawdata.at("name")}; }
+    std::string get_type() const { return std::string{rawdata.at("type")}; }
+    bool is_enabled() const { return bool{rawdata.at("enabled")}; }
+    int get_priority() const { return int{rawdata.at("priority")}; }
+    int get_cost() const { return int{rawdata.at("cost")}; }
+    std::vector<std::string> get_baseurl() const { return std::vector<std::string>(rawdata.at("baseurl")); }
+    std::string get_metalink() const { return std::string{rawdata.at("metalink")}; }
+    std::string get_mirrorlist() const { return std::string{rawdata.at("mirrorlist")}; }
+    int get_metadata_expire() const { return int{rawdata.at("metadata_expire")}; }
+    std::vector<std::string> get_excludepkgs() const { return std::vector<std::string>(rawdata.at("excludepkgs")); }
+    std::vector<std::string> get_includepkgs() const { return std::vector<std::string>(rawdata.at("includepkgs")); }
+    bool get_skip_if_unavailable() const { return bool{rawdata.at("skip_if_unavailable")}; }
+    std::vector<std::string> get_gpgkey() const { return std::vector<std::string>(rawdata.at("gpgkey")); }
+    bool get_gpgcheck() const { return bool{rawdata.at("gpgcheck")}; }
+    bool get_pkg_gpgcheck() const { return bool{rawdata.at("pkg_gpgcheck")}; }
+    bool get_repo_gpgcheck() const { return bool{rawdata.at("repo_gpgcheck")}; }
+    std::string get_repo_file_path() const { return std::string{rawdata.at("repofile")}; }
+    std::string get_revision() const { return std::string{rawdata.at("revision")}; }
+    std::vector<std::string> get_content_tags() const { return std::vector<std::string>(rawdata.at("content_tags")); }
     std::vector<std::pair<std::string, std::string>> get_distro_tags() const;
-    int64_t get_timestamp() const { return rawdata.at("cache_updated"); }
-    int get_max_timestamp() const { return rawdata.at("updated"); }
-    uint64_t get_size() const { return rawdata.at("size"); }
-    uint64_t get_pkgs() const { return rawdata.at("pkgs"); }
-    uint64_t get_available_pkgs() const { return rawdata.at("available_pkgs"); }
-    std::vector<std::string> get_mirrors() const { return rawdata.at("mirrors"); }
+    int64_t get_timestamp() const { return int64_t{rawdata.at("cache_updated")}; }
+    int get_max_timestamp() const { return int{rawdata.at("updated")}; }
+    uint64_t get_size() const { return uint64_t{rawdata.at("size")}; }
+    uint64_t get_pkgs() const { return uint64_t{rawdata.at("pkgs")}; }
+    uint64_t get_available_pkgs() const { return uint64_t{rawdata.at("available_pkgs")}; }
+    std::vector<std::string> get_mirrors() const { return std::vector<std::string>(rawdata.at("mirrors")); }
 
 private:
     dnfdaemon::KeyValueMap rawdata;
-- 
2.48.1

